using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace _05.ShoppingCenter
{
    public class Product : IComparable<Product>
    {
        public string Name { get; set; }

        public double Price { get; set; }

        public string Producer { get; set; }

        public Product(string name, double price, string producer)
        {
            this.Name = name;
            this.Price = price;
            this.Producer = producer;
        }

        public int CompareTo(Product other)
        {
            var result = this.Price.CompareTo(other.Price);

            return result;
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append('{');
            sb.Append(this.Name);
            sb.Append(';');
            sb.Append(this.Producer);
            sb.Append(';');
            sb.Append(string.Format("{0:F2}", this.Price));
            sb.Append('}');

            return sb.ToString();
        }
    }
}
using Wintellect.PowerCollections;

namespace _05.ShoppingCenter
{
    class ProductRepository
    {
        public MultiDictionary<string, Product> productsByName =
            new MultiDictionary<string, Product>(true);
        public MultiDictionary<string, Product> productsByProducer =
            new MultiDictionary<string, Product>(true);
        public OrderedBag<Product> productsByPrice = new OrderedBag<Product>();

        public void AddProduct(Product product)
        {
            productsByName.Add(product.Name, product);
            productsByProducer.Add(product.Producer, product);
            productsByPrice.Add(product);
        }

        public int Delete(string producer)
        {
            ICollection<Product> productsWithGivenProducer =
                productsByProducer[producer];
            var count = productsWithGivenProducer.Count;

            foreach (var product in productsWithGivenProducer)
            {
                productsByName.Remove(product.Name);
                productsByPrice.Remove(product);
            }
            productsByProducer.Remove(producer);

            return count;
        }

        public int Delete(string name, string producer)
        {
            var productsWithGivenName = new List<Product>(
                productsByName[name]);
            var temp = productsWithGivenName.TakeWhile(x => x.Producer == producer);
            var count = temp.Count();

            foreach (var product in temp)
            {
                productsByName.Remove(product.Name);
                productsByPrice.Remove(product);
                productsByProducer.Remove(producer);
            }

            return count;
        }

        public ICollection<Product> FindProductsByName(string name)
        {
            var result = productsByName[name];
            var res = new List<Product>(result);
            res.Sort();

            return res;
        }

        public IEnumerable<Product> FindProductsByPriceRange(double from, double to)
        {
            var result = productsByPrice.Range(
                new Product("searchItem", from, "searchItem"), true,
                new Product("searchItem", to, "searchItem"), true);
            var sorted = result
            .OrderBy(x => x.Name)
            .ThenBy(x => x.Producer)
            .ThenBy(x => x.Price);

            return sorted;
        }

        public ICollection<Product> FindProductsByProducer(string producer)
        {
            var result = productsByProducer[producer];
            var res = new List<Product>(result);
            res.Sort();

            return res;
        }
    }
}

namespace _05.ShoppingCenter
{
    class Program
    {
        private const string AddProduct = "AddProduct";
        private const string DeleteProducts = "DeleteProducts";
        private const string FindProductsByName = "FindProductsByName";
        private const string FindProductsByPriceRange = "FindProductsByPriceRange";
        private const string FindProductsByProducer = "FindProductsByProducer";

        private static ProductRepository productRepository =
            new ProductRepository();
        private static StringBuilder result = new StringBuilder();

        static void Main(string[] args)
        {
#if DEBUG
            Console.SetIn(new System.IO.StreamReader("../../input.txt"));
#endif
            int n = int.Parse(Console.ReadLine());
            for (int i = 0; i < n; i++)
            {
                string inputLine = Console.ReadLine();
                var command = inputLine.Substring(0, inputLine.IndexOf(' '));
                var afterCommand = inputLine.Substring(inputLine.IndexOf(' ')).Trim();
                string[] data =
                    afterCommand.Split(new char[] { ';' },
                        StringSplitOptions.RemoveEmptyEntries);

                CommandManager(command, data);
            }

            Console.Write(result);
        }

        private static void CommandManager(string command, string[] data)
        {
            if (command == AddProduct)
            {
                var name = data[0];
                var price = double.Parse(data[1]);
                var producer = data[2];
                var product = new Product(name, price, producer);
                productRepository.AddProduct(product);
                Print("Product added");
            }
            else if (command == DeleteProducts)
            {
                if (data.Length == 1)
                {
                    var producer = data[0];
                    int result = productRepository.Delete(producer);
                    if (result == 0)
                    {
                        Print("No products found");
                    }
                    else
                    {
                        Print(string.Format("{0} products deleted", result));
                    }
                }
                else
                {
                    var name = data[0];
                    var producer = data[1];
                    int result = productRepository.Delete(name, producer);
                    if (result == 0)
                    {
                        Print("No products found");
                    }
                    else
                    {
                        Print(string.Format("{0} products deleted", result));
                    }
                }
            }
            else if (command == FindProductsByName)
            {
                var products = productRepository.FindProductsByName(data[0]);
                if (products.Count == 0)
                {
                    Print("No products found");
                }
                else
                {
                    foreach (var product in products)
                    {
                        Print(product.ToString());
                    }
                }
            }
            else if (command == FindProductsByPriceRange)
            {
                var from = double.Parse(data[0]);
                var to = double.Parse(data[1]);
                var products = productRepository.FindProductsByPriceRange(from, to);
                if (products.Count() == 0)
                {
                    Print("No products found");
                }
                else
                {
                    foreach (var product in products)
                    {
                        Print(product.ToString());
                    }
                }
            }
            else if (command == FindProductsByProducer)
            {
                var products = productRepository.FindProductsByProducer(data[0]);
                if (products.Count == 0)
                {
                    Print("No products found");
                }
                else
                {
                    foreach (var product in products)
                    {
                        Print(product.ToString());
                    }
                }
            }
        }

        private static void Print(string text)
        {
            result.AppendLine(text);
        }
    }
}
