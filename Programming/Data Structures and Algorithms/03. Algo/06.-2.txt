using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Wintellect.PowerCollections;

namespace _06.Phonebook
{
    class PhoneBook
    {
        MultiDictionary<string, PhoneEntry> firstNames;
        MultiDictionary<string, PhoneEntry> middleNames;
        MultiDictionary<string, PhoneEntry> lastNames;
        MultiDictionary<string, PhoneEntry> towns;


        public PhoneBook(List<PhoneEntry> entries)
        {
            firstNames = new MultiDictionary<string, PhoneEntry>(true);
            middleNames = new MultiDictionary<string, PhoneEntry>(true);
            lastNames = new MultiDictionary<string, PhoneEntry>(true);
            towns = new MultiDictionary<string, PhoneEntry>(true);

            foreach (var entry in entries)
            {
                firstNames.Add(new KeyValuePair<string,
                    ICollection<PhoneEntry>>(entry.FirstName, new PhoneEntry[] { entry }));
                middleNames.Add(new KeyValuePair<string,
                    ICollection<PhoneEntry>>(entry.MiddleName, new PhoneEntry[] { entry }));
                lastNames.Add(new KeyValuePair<string,
                    ICollection<PhoneEntry>>(entry.LastName, new PhoneEntry[] { entry }));
                towns.Add(new KeyValuePair<string,
                    ICollection<PhoneEntry>>(entry.Town, new PhoneEntry[] { entry }));
            }

        }

        public List<PhoneEntry> Find(string name)
        {
            List<PhoneEntry> foundEntries = new List<PhoneEntry>();

            foundEntries.AddRange(firstNames[name]);
            foundEntries.AddRange(middleNames[name]);
            foundEntries.AddRange(lastNames[name]);

            return foundEntries;
        }

        public List<PhoneEntry> Find(string name, string town)
        {
            List<PhoneEntry> foundEntries = new List<PhoneEntry>();

            ICollection<PhoneEntry> entry = firstNames[name];
            foundEntries.AddRange(entry.Where(x => x.Town == town));

            entry = middleNames[name];
            foundEntries.AddRange(entry.Where(x => x.Town == town));

            entry = lastNames[name];
            foundEntries.AddRange(entry.Where(x => x.Town == town));

            return foundEntries;
        }
    }
}
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _06.Phonebook
{
    class PhoneEntry
    {
        string firstName, middleName, lastName;
        string town;
        string phoneNumber;

        public PhoneEntry(string firstName, string city, string phoneNumber, string lastName = "", string middleName = "")
        {
            this.FirstName = firstName;
            this.MiddleName = middleName;
            this.LastName = lastName;
            this.Town = city;
            this.PhoneNumber = phoneNumber;
        }

        public override string ToString()
        {
            string entryToString = string.Empty;

            if (middleName == "" && lastName == "")
            {
                entryToString = string.Format("{0} {1} {2}", firstName, town, phoneNumber);
            }
            else if (middleName == "")
            {
                entryToString = string.Format("{0} {1} {2} {3}", firstName, lastName, town, phoneNumber);
            }
            else
            {
                entryToString = string.Format("{0} {1} {2} {3} {4}", firstName, middleName, lastName, town, phoneNumber);
            }

            return entryToString;
        }

        public string FirstName
        {
            get
            {
                return this.firstName;
            }
            private set
            {
                this.firstName = value;
            }
        }

        public string MiddleName
        {
            get
            {
                return this.middleName;
            }
            private set
            {
                this.middleName = value;
            }
        }

        public string LastName
        {
            get
            {
                return this.lastName;
            }
            private set
            {
                this.lastName = value;
            }
        }

        public string Town
        {
            get
            {
                return this.town;
            }
            private set
            {
                this.town = value;
            }
        }

        public string PhoneNumber
        {
            get
            {
                return this.phoneNumber;
            }
            private set
            {
                this.phoneNumber = value;
            }
        }
    }
}
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace _06.Phonebook
{
    class PhonebookApp
    {
        static void Main(string[] args)
        {
            List<PhoneEntry> phoneEntries = GetPhones();
            PhoneBook phoneBook = new PhoneBook(phoneEntries);

            List<string> commands = GetCommands();

            ExecuteCommands(commands, phoneBook);
        }

        private static void ExecuteCommands(List<string> commands, PhoneBook phoneBook)
        {
            foreach (var command in commands)
            {
                List<PhoneEntry> found = new List<PhoneEntry>();
                string[] arguments = command.Split();
                if (arguments.Length == 1)
                {
                    found = phoneBook.Find(arguments[0]);
                }
                else if (arguments.Length == 2)
                {
                    found = phoneBook.Find(arguments[0], arguments[1]);
                }

                PrintFoundEntries(found, command);
            }
        }

        private static void PrintFoundEntries(List<PhoneEntry> found, string command)
        {
            Console.WriteLine("Command: {0}", command);
            foreach (var item in found)
            {
                Console.WriteLine(item.ToString());
            }
            Console.WriteLine("\n");
        }

        private static List<string> GetCommands()
        {
            List<string> commands = new List<string>();
            StreamReader sr = new StreamReader("..\\..\\commands.txt");
            using (sr)
            {
                while (!sr.EndOfStream)
                {
                    string command = sr.ReadLine();
                    var matches = Regex.Matches(command, @"""([^""]*)");
                    if (matches.Count == 2)
                    {
                        var match = matches[0].ToString();
                        commands.Add(match.Substring(1, match.Length - 1));
                    }
                    else if (matches.Count == 4)
                    {
                        var match1 = matches[0].ToString();
                        var match2 = matches[2].ToString();
                        commands.Add(match1.Substring(1, match1.Length - 1) + " " + match2.Substring(1, match2.Length - 1));
                    }
                }
            }

            return commands;
        }

        private static List<PhoneEntry> GetPhones()
        {
            StreamReader sr = new StreamReader("..\\..\\phones.txt");
            List<PhoneEntry> phoneEntries = new List<PhoneEntry>();
            using (sr)
            {
                while (!sr.EndOfStream)
                {
                    string text = sr.ReadLine();
                    string[] entryData = text.Split('|');

                    string[] names = entryData[0].Trim().Split();

                    CreateEntry(phoneEntries, entryData, names);
                }
                
            }

            return phoneEntries;
        }

        private static void CreateEntry(List<PhoneEntry> phoneEntries, string[] entryData, string[] names)
        {
            if (names.Length == 3)
            {
                PhoneEntry phoneEntry = new PhoneEntry(names[0].Trim(), entryData[1].Trim(), entryData[2].Trim(),
                    names[2].Trim(), names[1].Trim());

                phoneEntries.Add(phoneEntry);
            }
            else if (names.Length == 2)
            {
                PhoneEntry phoneEntry = new PhoneEntry(names[0].Trim(), entryData[1].Trim(), entryData[2].Trim(),
                    names[1].Trim());

                phoneEntries.Add(phoneEntry);
            }
            else
            {
                PhoneEntry phoneEntry = new PhoneEntry(names[0].Trim(), entryData[1].Trim(), entryData[2].Trim());

                phoneEntries.Add(phoneEntry);
            }
        }

    }
}
--------------------------------
commands.txt

find("Gancho")
find("Petrova", "Karnobat")
find("Petrova")
------------------------------
phones.txt

Mimi Shmatkata          | Plovdiv  | 0888 12 34 56
Kireto                  | Varna    | 052 23 45 67
Daniela Ivanova Petrova | Karnobat | 0899 999 888
Bat Gancho              | Sofia    | 02 946 946 946
Gancho                  | Sofia    | 99 999 999 999
Mara Bla-Bla Petrova    | Karnobat | 0899 999 888
Mara Bla-Bla Petrova    | Lukovit  | 0899 999 888